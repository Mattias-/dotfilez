#!/bin/bash

function hashmod() {
    # $1 is lower, $2 is upper, $3 is string to hash
    echo "$(echo "$3" | sum | cut -d ' ' -f 1) % ($2-$1+1) + $1" | bc
}

function dotimes() {
    num=$1
    shift
    RES=()
    for ((i = 0; i < $num; i++)); do
        $@
        RES+="$? "
    done
    echo $RES
}

function psgrep() {
    ps -fp $(pgrep -f "$@")
}

function nmaph() {
    nmap -n -sn "$1" -oG - | awk '/Up$/{print $2}'
}

function iterm2_set() {
    printf "\e]1337;%s=%s\a" $@
}

function iterm2_set_badge() {
    iterm2_set "SetBadgeFormat" $(echo -n "$@" | base64)
}

function iterm2_set_user_var() {
    iterm2_set "SetUserVar" "$1=$(echo -n "$2" | base64)"
}

aws-sts-decode() {
    aws sts decode-authorization-message \
        --query DecodedMessage \
        --output text \
        --encoded-message "$1" |
        jq
}

genrand() {
    openssl rand -base64 12 | tr '[:upper:]' '[:lower:]' | cut -c -10
}

genuuid() {
    uuidgen | tr '[:upper:]' '[:lower:]'
}

sigv4curl() {
    kf=$(find ~/.aws/cli/cache -type f -name '*.json' | head -1)
    user=$(jq -r '.Credentials | "\(.AccessKeyId):\(.SecretAccessKey)"' "$kf")
    sesstok=$(jq -r '.Credentials.SessionToken' "$kf")
    curl --user "$user" --header "x-amz-security-token: $sesstok" \
        --aws-sigv4 "aws:amz:eu-west-1:execute-api" \
        "$@"
}
