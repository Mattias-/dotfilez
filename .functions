#!/bin/bash

function hashmod() {
    # $1 is lower, $2 is upper, $3 is string to hash
    echo "$(echo "$3" | sum | cut -d ' ' -f 1) % ($2-$1+1) + $1" | bc
}

function dotimes() {
    num=$1
    shift
    RES=()
    for ((i = 0; i < $num; i++)); do
        $@
        RES+="$? "
    done
    echo $RES
}

function psgrep() {
    ps -fp $(pgrep -f "$@")
}

function nmaph() {
    nmap -n -sn "$1" -oG - | awk '/Up$/{print $2}'
}

function iterm2_set() {
    printf "\e]1337;%s=%s\a" $@
}

function iterm2_set_badge() {
    iterm2_set "SetBadgeFormat" $(echo -n "$@" | base64)
}

function iterm2_set_user_var() {
    iterm2_set "SetUserVar" "$1=$(echo -n "$2" | base64)"
}

aws-sts-decode() {
    aws sts decode-authorization-message \
        --query DecodedMessage \
        --output text \
        --encoded-message "$1" |
        jq
}

genrand() {
    openssl rand -base64 12 | tr '[:upper:]' '[:lower:]' | cut -c -10
}

genuuid() {
    uuidgen | tr '[:upper:]' '[:lower:]'
}

sigv4curl() {
    creds=$(jq -c -s '. |= sort_by(.Credentials.Expiration) | last | .Credentials' <~/.aws/cli/cache/*.json)
    user=$(jq -r '"\(.AccessKeyId):\(.SecretAccessKey)"' <<<"$creds")
    sesstok=$(jq -r '.SessionToken' <<<"$creds")
    expiration=$(jq -r '.Expiration' <<<"$creds")
    # The credential might be stale, refresh by making a call.
    {
        if [[ "$expiration" < "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" ]]; then
            echo "DEBUG: $expiration is before $(date -u +"%Y-%m-%dT%H:%M:%SZ") running: aws sts get-caller-identity"
            aws sts get-caller-identity
        fi
    } >&2
    curl --user "$user" --header "x-amz-security-token: $sesstok" \
        --aws-sigv4 "aws:amz:eu-central-1:execute-api" \
        "$@"
}

scanimage() {
    docker run --rm -it aquasec/trivy image --scanners vuln --ignore-unfixed "$@"
}
