#!/bin/bash
set -euo pipefail

mkdir -p ~/screenshots

sudo timedatectl set-ntp true

sudo pacman -Syu
sudo pacman -S --needed \
    curl \
    jq \
    git \
    vim \
    go \
    hub \
    keepassxc \
    htop \
    shellcheck \
    traceroute \
    nmap \
    tree \
    tmux \
    ufw \
    openssh \
    iperf3 \
    neovim \
    terraform \
    vagrant \
    packer \
    alacritty \
    docker \
    virtualbox \
    virtualbox-host-modules-arch \
    fzf \
    rclone \
    the_silver_searcher \
    shfmt \
    python \
    python-pip \
    python-pipenv \
    python2 \
    xorg-server-xwayland \
    sway \
    swayidle \
    swaylock \
    grim \
    slurp \
    wl-clipboard \
    ttf-inconsolata \
    ttf-dejavu \
    ttf-liberation \
    ttf-roboto \
    dmenu \
    pavucontrol \
    grc \
    light \
    pulseaudio \
    bash-completion

sudo usermod -aG docker "$USER"

# Install yay
if ! yay -V &>/dev/null; then
    git clone https://aur.archlinux.org/yay.git "$HOME/projects/yay"
    cd "$_"
    makepkg -si --noconfirm
fi

yay -S \
    yay \
    google-chrome \
    google-cloud-sdk \
    kubernetes-helm-bin \
    kubectl-bin \
    minikube-bin \
    spotify \
    cfssl \
    waybar \
    ttf-font-awesome-4 \
    kind-bin

pip3 install --user --upgrade \
    neovim \
    black \
    yamllint \
    awscli

manage_version() {
    local name="$1"
    local version="$2"
    local latest_version
    local installed_version
    latest_version="$("latest_version_$name")"
    installed_version="$("installed_version_$name")"

    if [ "$version" == "" ]; then
        version=$installed_version
        if [ "$latest_version" != "" ] && [ "$installed_version" != "$latest_version" ]; then
            read -p "$(tput setaf 2)${name} ${latest_version}$(tput sgr0) is available, upgrade? [y/N] " upgrade
            if [ "$upgrade" == "y" ]; then
                version=$latest_version
            fi
        fi
    fi

    status="$(tput setaf 2)${name}$(tput sgr0):"

    if [ "$latest_version" != "" ] && [ "$version" != "$latest_version" ]; then
        status="${status} $(tput setaf 2)(${latest_version} available)$(tput sgr0)"
    fi

    if [ "$installed_version" == "$version" ]; then
        status="${status} $version is already installed"
    else
        "install_$name" "$version"
        status="${status} installed $version"
    fi

    echo "$status"
}

install_assume-role() {
    sudo curl -Lso /usr/local/bin/assume-role https://raw.githubusercontent.com/coinbase/assume-role/${version}/assume-role
    sudo chmod +x /usr/local/bin/assume-role
}

latest_version_assume-role() {
    echo "master"
}

installed_version_assume-role() {
    which assume-role >/dev/null && echo "master"
}

manage_version "assume-role" "master"
