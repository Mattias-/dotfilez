#!/bin/bash
set -euo pipefail

packages=(
    curl
    jq
    git
    vim
    bc
    go
    tmux
    bash-completion
    htop
    tree
    fzf
    unzip
    fuse2
    rclone
    pacman-contrib
    reflector
    neofetch
    ripgrep
    bat
    zip
    bpytop
    man-db
    neovim

    nmap
    traceroute
    whois
    dnsutils
    ufw
    openssh
    iperf3
    gnu-netcat
    inetutils

    python
    python-pip
    python-pipenv
    python2

    sway
    swayidle
    swaylock
    xorg-server-xwayland
    grim
    slurp
    wofi
    waybar
    wl-clipboard

    light
    pavucontrol
    bluez-utils
    pipewire
    pipewire-alsa
    pipewire-jack
    pipewire-media-session
    pipewire-pulse
    gst-plugin-pipewire
    libpulse

    shfmt
    helm
    github-cli
    terraform
    vagrant
    packer
    hub
    docker
    virtualbox
    virtualbox-host-modules-arch

    keepassxc
    firefox
    transmission-qt
    alacritty
    wireshark-qt
    ttf-inconsolata
    ttf-dejavu
    ttf-liberation
    ttf-roboto
    noto-fonts-emoji
)

aur_packages=(
    pikaur
    pipes.sh
    google-cloud-sdk
    cfssl
    ttf-font-awesome-4
    nerd-fonts-inconsolata
    yq2-bin
    aws-cli-v2-bin
    aws-session-manager-plugin
    starship-bin
    nvm

    google-chrome
    spotify-dev
    visual-studio-code-bin

    kubectl-bin
    minikube-bin
    kind-bin
    tfsec
    shellcheck-bin
)

uninstalled_packages=(
    grc
)

pip_packages=(
    wheel
    neovim
    pynvim
    black
    yamllint
    pre-commit
)

npm_packages=(
    dockerfile-language-server-nodejs
    vscode-langservers-extracted
    pyright
)

main() {
    mkdir -p ~/screenshots
    mkdir -p ~/projects
    mkdir -p ~/mnt
    mkdir -p ~/bin

    sudo pacman -Syu --needed "${packages[@]}"
    install_pikaur
    pikaur --noedit -S "${aur_packages[@]}"
    pikaur -Rsu "${uninstalled_packages[@]}" || true

    pip3 install --user --upgrade "${pip_packages[@]}"

    setup_node
    npm install -g "${npm_packages[@]}"

    install_hyper

    sudo timedatectl set-ntp true
    sudo usermod -aG docker,wireshark "$USER"
    sudo systemctl enable --now docker
    configure_backlight
    configure_iptables
    sudo ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
    sudo rm -f /etc/systemd/network/20-ethernet.network
}

configure_backlight() {
    sudo pacman -S --needed light
    sudo usermod -aG video "$USER"

    # Add udev rule for light command
    sudo tee /usr/lib/udev/rules.d/90-backlight.rules >/dev/null <<EOF
ACTION=="add", SUBSYSTEM=="backlight", RUN+="/bin/chgrp video /sys/class/backlight/%k/brightness"
ACTION=="add", SUBSYSTEM=="backlight", RUN+="/bin/chmod g+w /sys/class/backlight/%k/brightness"
ACTION=="add", SUBSYSTEM=="leds", RUN+="/bin/chgrp video /sys/class/leds/%k/brightness"
ACTION=="add", SUBSYSTEM=="leds", RUN+="/bin/chmod g+w /sys/class/leds/%k/brightness"
EOF
}

install_pikaur() {
    if command -v pikaur >/dev/null; then
        return 0
    fi
    d="/tmp/pikaur"
    rm -rf "$d"
    git clone https://aur.archlinux.org/pikaur.git "$d"
    (
        cd "$d"
        makepkg -fsri --noconfirm
    )
    rm -rf "$d"
}

install_session_manager_plugin() {
    if command -v session-manager-plugin >/dev/null; then
        return 0
    fi
    d="/tmp/ssm"
    mkdir -p "$d"
    (
        cd "$d" || exit 1
        curl -s -L -O "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb"
        ar x session-manager-plugin.deb data.tar.gz
        tar -xf data.tar.gz
        sudo cp usr/local/sessionmanagerplugin/bin/session-manager-plugin /usr/local/bin/
    )
    rm -rf "$d"
}

install_hyper() {
    if command -v hyper >/dev/null; then
        return 0
    fi
    curl -Lo "$HOME/bin/hyper" https://releases.hyper.is/download/AppImage
    chmod +x "$HOME/bin/hyper"
}

configure_iptables() {
    sudo cp "$HOME/dotfilez/iptables.rules" /etc/iptables/iptables.rules
    sudo systemctl enable --now iptables
}

setup_node() {
    if [ -f /usr/share/nvm/nvm.sh ]; then
        # shellcheck disable=SC1091
        source /usr/share/nvm/init-nvm.sh
    fi
    if [ -f /usr/local/opt/nvm/nvm.sh ]; then
        # shellcheck disable=SC1091
        source /usr/local/opt/nvm/init-nvm.sh
    fi
    nvm install --lts --latest-npm --no-progress
}

main
