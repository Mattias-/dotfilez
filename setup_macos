#!/bin/bash
set -euo pipefail

# shellcheck source=./packages.sh
source ./packages.sh

main() {
    mkdir -p ~/screenshots
    mkdir -p ~/projects
    mkdir -p ~/mnt
    mkdir -p ~/bin

    install_macos_packages

    install_go_packages
    install_python_packages
    #setup_node
    install_node_packages

    configure_macos
    set_hostname

    #nvim +":PlugInstall" +qall
    #nvim +":PlugUpgrade" +qall
    #nvim +":PlugUpdate" +qall
    nvim +":helptags ALL" +qall
    ln -sf "$(command -v nvim)" "$HOME/bin/vi"
    ln -sf "$(command -v nvim)" "$HOME/bin/vim"
}

install_go_packages() {
    # shellcheck disable=SC2154
    for go_package in "${go_packages[@]}"; do
        go install "$go_package"
    done
}

install_python_packages() {
    local installed
    installed=$(pipx list --short | cut -d" " -f1)
    # shellcheck disable=SC2154
    for pip_package in "${pip_packages[@]}"; do
        if ! grep -q "$pip_package" <<<"$installed"; then
            pipx install -f "$pip_package"
        fi
    done
    pipx upgrade-all
}

install_node_packages() {
    # shellcheck disable=SC2154
    npm install -g "${npm_packages[@]}"
}

setup_node() {
    fnm install --lts
    fnm default lts-latest
    eval "$(fnm env --shell bash)"
    npm install -g npm@latest
    #npm completion | sudo tee /etc/bash_completion.d/npm >/dev/null
    corepack enable
}

install_macos_packages() {
    if ! xcode-select -p >/dev/null || ! [ -d "/Library/Developer/CommandLineTools/usr/bin" ]; then
        echo "Install Xcode command line tools and run script again"
        echo "xcode-select --install"
        exit 1
    fi
    if ! command -v brew >/dev/null; then
        bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
    arch -arm64 brew update
    arch -arm64 brew upgrade
    arch -arm64 brew bundle

    echo "# vim: set filetype=ruby" >Brewfile.new
    brew bundle dump --file - >>Brewfile.new

    if ! command -v nix >/dev/null; then
        sh <(curl -L https://nixos.org/nix/install)
    fi

    if ! nix-channel --list | grep nixos; then
        nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixos
    fi
    nix-channel --update
    diff --label current <(nix-env --query) \
        --label user.nix <(nix-env --query --available -f ./user.nix) || true
    nix-env --install --remove-all -f ./user.nix
}

configure_macos() {
    defaults write .GlobalPreferences com.apple.mouse.scaling 0.5
    defaults write NSGlobalDomain AppleShowAllExtensions -bool true
    defaults write NSGlobalDomain InitialKeyRepeat -int 12
    defaults write NSGlobalDomain KeyRepeat -int 1
    defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false
    defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
    defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false
    defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
    defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true
    defaults write com.apple.dock autohide -bool true
    defaults write com.apple.dock orientation -string "right"
    defaults write com.apple.dock persistent-apps -array
    defaults write com.apple.dock show-recents -bool false
    defaults write com.apple.finder AppleShowAllFiles -bool true
    defaults write com.apple.finder QuitMenuItem -bool true
    defaults write com.apple.finder ShowPathbar -bool true
    defaults write com.apple.finder ShowStatusBar -bool true
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
    defaults write com.apple.screencapture location ~/screenshots
    defaults write com.apple.screensaver askForPassword -int 1
    defaults write com.apple.screensaver askForPasswordDelay -int 0
    defaults write NSGlobalDomain AppleInterfaceStyle Dark
    defaults write NSGlobalDomain AppleInterfaceStyleSwitchesAutomatically -bool false
    #defaults write ~/Library/Preferences/com.apple.HIToolbox.plist AppleEnabledInputSources -array-add '{ InputSourceKind = "Keyboard Layout"; "KeyboardLayout ID" = 252; "KeyboardLayout Name" = ABC; }'
    #defaults read com.apple.HIToolbox
}

set_hostname() {
    current_cn="$(scutil --get ComputerName)"
    cat <<EOF
LocalHostName: $(scutil --get LocalHostName)
ComputerName:  ${current_cn}
HostName:      $(scutil --get HostName)
EOF

    # If computer name contains unwanted characters
    if [[ $current_cn != $(tr -d '[:upper:][:digit:]- ()' <<<"$current_cn") ]]; then
        read -r -p "Enter a new hostname: " new_hn
        echo "Setting hostname to: $new_hn"
        scutil --set LocalHostName "$new_hn"
        scutil --set ComputerName "$new_hn"
        scutil --set HostName "$new_hn"
    else
        echo "Hostname OK"
    fi
}

main "$@"
