#!/bin/bash
set -euo pipefail

source ./packages.sh

main() {
    mkdir -p ~/screenshots
    mkdir -p ~/projects
    mkdir -p ~/mnt
    mkdir -p ~/bin

    install_macos_packages

    install_go_packages
    install_python_packages
    setup_node
    install_node_packages

    configure_macos

    nvim +":PlugInstall" +qall
    nvim +":PlugUpgrade" +qall
    nvim +":PlugUpdate" +qall
    nvim +":helptags ALL" +qall
    ln -sf "$(command -v nvim)" "$HOME/bin/vi"
    ln -sf "$(command -v nvim)" "$HOME/bin/vim"
}

install_go_packages() {
    # shellcheck disable=SC2154
    for go_package in "${go_packages[@]}"; do
        go install "$go_package"
    done
}

install_python_packages() {
    # shellcheck disable=SC2154
    pip3 install --user --upgrade "${pip_packages[@]}"
}

install_node_packages() {
    # shellcheck disable=SC2154
    npm install -g "${npm_packages[@]}"
}

setup_node() {
    fnm install --lts
    fnm default lts-latest
    eval "$(fnm env --shell bash)"
    npm install -g npm@latest
    #npm completion | sudo tee /etc/bash_completion.d/npm >/dev/null
    corepack enable
}

install_macos_packages() {
    #sudo softwareupdate -i -a
    if ! xcode-select -p >/dev/null; then
        echo "Install Xcode command line tools and run script again"
        echo "xcode-select --install"
        exit 1
    fi
    if ! command -v brew >/dev/null; then
        bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
    arch -arm64 brew update
    arch -arm64 brew upgrade
    arch -arm64 brew bundle

}

configure_macos() {
    defaults write .GlobalPreferences com.apple.mouse.scaling 0.5
    defaults write NSGlobalDomain AppleShowAllExtensions -bool true
    defaults write NSGlobalDomain InitialKeyRepeat -int 12
    defaults write NSGlobalDomain KeyRepeat -int 1
    defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false
    defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
    defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false
    defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
    defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true
    defaults write com.apple.dock autohide -bool true
    defaults write com.apple.dock orientation -string "right"
    defaults write com.apple.dock persistent-apps -array
    defaults write com.apple.dock show-recents -bool false
    defaults write com.apple.finder AppleShowAllFiles -bool true
    defaults write com.apple.finder QuitMenuItem -bool true
    defaults write com.apple.finder ShowPathbar -bool true
    defaults write com.apple.finder ShowStatusBar -bool true
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
    defaults write com.apple.screencapture location ~/screenshots
    defaults write com.apple.screensaver askForPassword -int 1
    defaults write com.apple.screensaver askForPasswordDelay -int 0

    defaults write NSGlobalDomain AppleInterfaceStyle Dark
    defaults write NSGlobalDomain AppleInterfaceStyleSwitchesAutomatically -bool false

    if [ "$(scutil --get HostName)" = "xxxx" ]; then
        echo YEP
    else
        scutil --set LocalHostName "xxxx"
        scutil --set ComputerName "xxxx"
        scutil --set HostName "xxxx"
    fi
}

main "$@"
