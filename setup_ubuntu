#!/bin/bash
set -o pipefail

echo "Running APT update and upgrade..."
sudo apt-get update -y >/dev/null
sudo apt-get upgrade -y >/dev/null
sudo apt-get install -y curl jq >/dev/null

manage_version () {
    local name="$1"
    local version="$2"
    local latest_version
    local installed_version
    latest_version="$("latest_version_$name")"
    installed_version="$("installed_version_$name")"

    if [ "$version" == "" ]; then
        version=$installed_version
        if [ "$latest_version" != "" ] && [ "$installed_version" != "$latest_version" ]; then
            read -p "$(tput setaf 2)${name} ${latest_version}$(tput sgr0) is available, upgrade? [y/N] " upgrade
            if [ "$upgrade" == "y" ]; then
                version=$latest_version
            fi
        fi
    fi

    status="$(tput setaf 2)${name}$(tput sgr0):"

    if [ "$latest_version" != "" ] && [ "$version" != "$latest_version" ]; then
        status="${status} $(tput setaf 2)(${latest_version} available)$(tput sgr0)"
    fi

    if [ "$installed_version" == "$version" ]; then
        status="${status} $version is already installed"
    else
        "install_$name" "$version"
        status="${status} installed $version"
    fi

    echo "$status"
}

install_helm () {
    local version="$1"
    curl -Lo helm.tar.gz "https://storage.googleapis.com/kubernetes-helm/helm-${version}-linux-amd64.tar.gz"
    tar -zxf helm.tar.gz && rm "$_"
    chmod +x linux-amd64/helm
    sudo mv linux-amd64/helm /usr/local/bin/
    rm -r linux-amd64
}

latest_version_helm () {
    curl -Ls https://api.github.com/repos/kubernetes/helm/tags | jq -r .[0].name
}

installed_version_helm () {
    helm version --client --short  2>/dev/null | cut -d' ' -f2- | cut -d'+' -f1
}

manage_version "helm"

install_go () {
    curl -LO "https://dl.google.com/go/${version}.linux-amd64.tar.gz"
    sudo tar -C /usr/local -xzf "${version}.linux-amd64.tar.gz" && rm "$_"
    # export PATH=$PATH:/usr/local/go/bin
}

latest_version_go () {
    curl -Ls https://golang.org/dl/ | grep -oP "https://dl.google.com/go/\Kgo[0-9.]+.linux-amd64.tar.gz" | head -1 | sed -n 's/\(go.*\).linux-.*/\1/p'
}

installed_version_go () {
    go version 2>/dev/null | cut -d' ' -f3
}

manage_version "go" "go1.11"

install_dep () {
    curl -Lo dep "https://github.com/golang/dep/releases/download/${version}/dep-linux-amd64"
    chmod +x dep
    sudo mv dep /usr/local/bin/
}

latest_version_dep () {
    curl -Ls https://api.github.com/repos/golang/dep/tags | jq -r .[0].name
}

installed_version_dep () {
    dep version 2>/dev/null | grep -oP "^ version\s+:\s+\K(.*)"
}

manage_version "dep" "v0.5.0"

install_minikube () {
    curl -Lo minikube "https://storage.googleapis.com/minikube/releases/${version}/minikube-linux-amd64"
    chmod +x minikube
    sudo mv minikube /usr/local/bin/
    minikube completion bash | sudo tee /etc/bash_completion.d/minikube >/dev/null

    # KVM2 driver
    curl -LO "https://storage.googleapis.com/minikube/releases/${version}/docker-machine-driver-kvm2"
    chmod +x docker-machine-driver-kvm2
    sudo mv docker-machine-driver-kvm2 /usr/bin/
}

latest_version_minikube () {
    curl -Ls https://api.github.com/repos/kubernetes/minikube/tags | jq -r .[0].name
}

installed_version_minikube () {
    minikube version 2>/dev/null | cut -d' ' -f3
}

manage_version "minikube"

install_kubectl () {
    curl -LO "https://storage.googleapis.com/kubernetes-release/release/${version}/bin/linux/amd64/kubectl"
    chmod +x kubectl
    sudo mv kubectl /usr/local/bin/
    kubectl completion bash | sudo tee /etc/bash_completion.d/kubectl >/dev/null
}

latest_version_kubectl () {
    curl -Ls https://storage.googleapis.com/kubernetes-release/release/stable.txt
}

installed_version_kubectl () {
    kubectl version --client --short  2>/dev/null | cut -d' ' -f3
}

manage_version "kubectl"


install_rclone () {
    tmp_dir=$(mktemp -d 2>/dev/null || mktemp -d -t 'rclone-install')
    pushd "$tmp_dir"
    export XDG_CONFIG_HOME=config
    curl -Lo rclone.zip "https://downloads.rclone.org/rclone-current-linux-amd64.zip"
    unzip_dir="tmp_unzip_dir_for_rclone"
    unzip -a rclone.zip -d $unzip_dir
    cd $unzip_dir/*

    chmod +x rclone
    sudo chown root:root rclone
    sudo mv rclone /usr/local/bin/
    #manuals
    sudo mkdir -p /usr/local/share/man/man1
    sudo cp rclone.1 /usr/local/share/man/man1/
    mandb
    popd
    rm -r "$tmp_dir"
}

latest_version_rclone () {
    curl -Ls https://downloads.rclone.org/version.txt | cut -d' ' -f2
}

installed_version_rclone () {
    rclone --version  2>/dev/null | head -1 | cut -d' ' -f2
}

manage_version "rclone"

install_hub () {
    curl -Lo hub.tgz "https://github.com/github/hub/releases/download/v${version}/hub-linux-amd64-${version}.tgz"
    tar -xzf hub.tgz && rm "$_"
    pushd "hub-linux-amd64-${version}"
    sudo cp etc/hub.bash_completion.sh /etc/bash_completion.d/hub
    sudo cp bin/hub /usr/local/bin/
    popd
    rm -r "hub-linux-amd64-${version}"
}

latest_version_hub () {
    curl -Ls https://api.github.com/repos/github/hub/tags | jq -r .[0].name | tr -d 'v'
}

installed_version_hub () {
    hub version 2>/dev/null | tail -1 | cut -d' ' -f3
}

manage_version "hub"

install_neovim () {
    sudo curl -Lo /usr/local/bin/nvim "https://github.com/neovim/neovim/releases/download/${version}/nvim.appimage"
    sudo chmod +x /usr/local/bin/nvim
}

latest_version_neovim () {
    curl -Ls https://api.github.com/repos/neovim/neovim/tags | jq -r .[0].name
}

installed_version_neovim () {
    nvim --version 2>/dev/null | head -1 | grep -oP '\s+\K[v0-9.]*'
}

manage_version "neovim" "v0.3.1"

install_terraform () {
    curl -Lo terraform.zip "https://releases.hashicorp.com/terraform/${version}/terraform_${version}_linux_amd64.zip"
    unzip terraform.zip
    sudo mv terraform /usr/local/bin/terraform
    rm -r terraform.zip
}

latest_version_terraform () {
    curl -s https://releases.hashicorp.com/terraform/ | grep '<a href="/terraform' | head -1 | cut -d '/' -f3
}

installed_version_terraform () {
    terraform -version 2>/dev/null | head -1 | cut -d ' ' -f2 | cut -c2-
}

manage_version "terraform" "0.11.8"

echo "Installing repos"
install_google_cloud_sdk () {
    curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - &>/dev/null
    echo "deb https://packages.cloud.google.com/apt cloud-sdk-$(lsb_release -cs) main" \
        | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list >/dev/null
}
install_google_cloud_sdk &

install_docker () {
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - &>/dev/null
    echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
        | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
}
install_docker &

install_spotify () {
    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 931FF8E79F0876134EDDBDCCA87FF9DF48BF1C90 &>/dev/null
    echo "deb http://repository.spotify.com stable non-free" \
        | sudo tee /etc/apt/sources.list.d/spotify.list >/dev/null
}
install_spotify &

# keepassxc
sudo add-apt-repository -yn ppa:phoerious/keepassxc &>/dev/null &

# vim
sudo add-apt-repository -yn ppa:jonathonf/vim &>/dev/null &

# git
sudo add-apt-repository -yn ppa:git-core/ppa &>/dev/null &

wait < <(jobs -p)

echo "Running APT update and install"
sudo apt-get update -y >/dev/null
sudo apt-get install -y \
    keepassxc \
    vim \
    git \
    htop \
    jq \
    silversearcher-ag \
    shellcheck \
    traceroute \
    nmap \
    tree \
    tilix \
    docker-ce \
    spotify-client \
    google-cloud-sdk \
    libvirt-bin qemu-kvm virt-manager \

#install_qemu_kvm || true
sudo usermod -aG docker "$USER"
